import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, D as validate_each_argument, v as validate_slots, e as element, A as text, p as space, a as claim_element, b as children, B as claim_text, q as claim_space, f as detach_dev, g as attr_dev, O as toggle_class, h as add_location, j as insert_dev, w as append_dev, y as listen_dev, C as set_data_dev, z as noop, F as destroy_each } from './client.2d8aba47.js';

/* src/components/ScreenToggle.svelte generated by Svelte v3.31.0 */

const file = "src/components/ScreenToggle.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (38:1) {#each labels as label, index}
function create_each_block(ctx) {
	let button;
	let t0_value = /*label*/ ctx[3] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*index*/ ctx[5]);
	}

	const block = {
		c: function create() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, t0_value);
			t1 = claim_space(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-vq5kbo");
			toggle_class(button, "selected", /*offset*/ ctx[0] === /*index*/ ctx[5]);
			add_location(button, file, 38, 2, 643);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*labels*/ 2 && t0_value !== (t0_value = /*label*/ ctx[3] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*offset*/ 1) {
				toggle_class(button, "selected", /*offset*/ ctx[0] === /*index*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(38:1) {#each labels as label, index}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let each_value = /*labels*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "toggle svelte-vq5kbo");
			add_location(div, file, 36, 0, 588);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*offset, labels*/ 3) {
				each_value = /*labels*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ScreenToggle", slots, []);
	let { labels } = $$props;
	let { offset = 0 } = $$props;
	const writable_props = ["labels", "offset"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ScreenToggle> was created with unknown prop '${key}'`);
	});

	const click_handler = index => $$invalidate(0, offset = index);

	$$self.$$set = $$props => {
		if ("labels" in $$props) $$invalidate(1, labels = $$props.labels);
		if ("offset" in $$props) $$invalidate(0, offset = $$props.offset);
	};

	$$self.$capture_state = () => ({ labels, offset });

	$$self.$inject_state = $$props => {
		if ("labels" in $$props) $$invalidate(1, labels = $$props.labels);
		if ("offset" in $$props) $$invalidate(0, offset = $$props.offset);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [offset, labels, click_handler];
}

class ScreenToggle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { labels: 1, offset: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ScreenToggle",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*labels*/ ctx[1] === undefined && !("labels" in props)) {
			console.warn("<ScreenToggle> was created without expected prop 'labels'");
		}
	}

	get labels() {
		throw new Error("<ScreenToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labels(value) {
		throw new Error("<ScreenToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get offset() {
		throw new Error("<ScreenToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set offset(value) {
		throw new Error("<ScreenToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

// REPL props

const svelteUrl = `https://unpkg.com/svelte@3`;
const rollupUrl = `https://unpkg.com/rollup@1/dist/rollup.browser.js`;
const mapbox_setup = `window.MAPBOX_ACCESS_TOKEN = undefined;`;

export { ScreenToggle as S, mapbox_setup as m, rollupUrl as r, svelteUrl as s };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmNjNjgxYmRiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TY3JlZW5Ub2dnbGUuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL2NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRleHBvcnQgbGV0IGxhYmVscztcblx0ZXhwb3J0IGxldCBvZmZzZXQgPSAwO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0LnRvZ2dsZSB7XG5cdFx0cG9zaXRpb246IGZpeGVkO1xuXHRcdGJvdHRvbTogMDtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDQuNnJlbTtcblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0Ym9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLXNlY29uZCk7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG5cdH1cblxuXHRidXR0b24ge1xuXHRcdG1hcmdpbjogMCAuMTVlbTtcblx0XHR3aWR0aDogNGVtO1xuXHRcdGhlaWdodDogMWVtO1xuXHRcdHBhZGRpbmc6IC4yZW0gLjRlbSAuM2VtO1xuXHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yKTtcblx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xuXHRcdGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuXHRcdGNvbG9yOiAjODg4O1xuXHRcdGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2stbGlnaHQpO1xuXHR9XG5cblx0LnNlbGVjdGVkIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltZSk7XG5cdFx0Y29sb3I6IHdoaXRlO1xuXHR9XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwidG9nZ2xlXCI+XG5cdHsjZWFjaCBsYWJlbHMgYXMgbGFiZWwsIGluZGV4fVxuXHRcdDxidXR0b25cblx0XHRcdGNsYXNzOnNlbGVjdGVkPXtvZmZzZXQgPT09IGluZGV4fVxuXHRcdFx0b246Y2xpY2s9eygpID0+IG9mZnNldCA9IGluZGV4fVxuXHRcdD5cblx0XHRcdHtsYWJlbH1cblx0XHQ8L2J1dHRvbj5cblx0ey9lYWNofVxuPC9kaXY+XG4iLCIvLyBSRVBMIHByb3BzXG5cbmV4cG9ydCBjb25zdCBzdmVsdGVVcmwgPSBgaHR0cHM6Ly91bnBrZy5jb20vc3ZlbHRlQDNgO1xuZXhwb3J0IGNvbnN0IHJvbGx1cFVybCA9IGBodHRwczovL3VucGtnLmNvbS9yb2xsdXBAMS9kaXN0L3JvbGx1cC5icm93c2VyLmpzYDtcbmV4cG9ydCBjb25zdCBtYXBib3hfc2V0dXAgPSBgd2luZG93Lk1BUEJPWF9BQ0NFU1NfVE9LRU4gPSBwcm9jZXNzLmVudi5NQVBCT1hfQUNDRVNTX1RPS0VOO2A7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OzswQkEwQ0ksR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytDQUhVLEdBQU0sa0JBQUssR0FBSzs7Ozs7Ozs7Ozs7Ozs7O2tFQUcvQixHQUFLOzs7Z0RBSFUsR0FBTSxrQkFBSyxHQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFGM0IsR0FBTTs7OztnQ0FBWCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFBQyxHQUFNOzs7OytCQUFYLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXBDSyxNQUFNO09BQ04sTUFBTSxHQUFHLENBQUM7Ozs7Ozs7Z0RBc0NILE1BQU0sR0FBRyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeENqQztBQUNBO0FBQ1ksTUFBQyxTQUFTLEdBQUcsQ0FBQywwQkFBMEIsRUFBRTtBQUMxQyxNQUFDLFNBQVMsR0FBRyxDQUFDLGlEQUFpRCxFQUFFO0FBQ2pFLE1BQUMsWUFBWSxHQUFHLENBQUMsdUNBQTZEOzs7OyJ9
