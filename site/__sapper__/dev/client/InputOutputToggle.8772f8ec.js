import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, A as text, p as space, a as claim_element, b as children, B as claim_text, f as detach_dev, q as claim_space, r as set_style, g as attr_dev, O as toggle_class, h as add_location, j as insert_dev, w as append_dev, y as listen_dev, z as noop } from './client.2d8aba47.js';

/* src/components/Repl/InputOutputToggle.svelte generated by Svelte v3.31.0 */

const file = "src/components/Repl/InputOutputToggle.svelte";

function create_fragment(ctx) {
	let label;
	let span0;
	let t0;
	let t1;
	let input;
	let t2;
	let span1;
	let t3;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label = element("label");
			span0 = element("span");
			t0 = text("input");
			t1 = space();
			input = element("input");
			t2 = space();
			span1 = element("span");
			t3 = text("output");
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			span0 = claim_element(label_nodes, "SPAN", { style: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "input");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(label_nodes);
			input = claim_element(label_nodes, "INPUT", { type: true, class: true });
			t2 = claim_space(label_nodes);
			span1 = claim_element(label_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "output");
			span1_nodes.forEach(detach_dev);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(span0, "text-align", "right");
			attr_dev(span0, "class", "svelte-14svxs3");
			toggle_class(span0, "active", !/*checked*/ ctx[0]);
			add_location(span0, file, 23, 1, 397);
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "class", "svelte-14svxs3");
			add_location(input, file, 24, 1, 467);
			attr_dev(span1, "class", "svelte-14svxs3");
			toggle_class(span1, "active", /*checked*/ ctx[0]);
			add_location(span1, file, 25, 1, 505);
			attr_dev(label, "class", "input-output-toggle svelte-14svxs3");
			add_location(label, file, 22, 0, 360);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, span0);
			append_dev(span0, t0);
			append_dev(label, t1);
			append_dev(label, input);
			input.checked = /*checked*/ ctx[0];
			append_dev(label, t2);
			append_dev(label, span1);
			append_dev(span1, t3);

			if (!mounted) {
				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*checked*/ 1) {
				toggle_class(span0, "active", !/*checked*/ ctx[0]);
			}

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*checked*/ 1) {
				toggle_class(span1, "active", /*checked*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("InputOutputToggle", slots, []);
	let { checked } = $$props;
	const writable_props = ["checked"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<InputOutputToggle> was created with unknown prop '${key}'`);
	});

	function input_change_handler() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	$$self.$$set = $$props => {
		if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
	};

	$$self.$capture_state = () => ({ checked });

	$$self.$inject_state = $$props => {
		if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [checked, input_change_handler];
}

class InputOutputToggle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { checked: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "InputOutputToggle",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*checked*/ ctx[0] === undefined && !("checked" in props)) {
			console.warn("<InputOutputToggle> was created without expected prop 'checked'");
		}
	}

	get checked() {
		throw new Error("<InputOutputToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<InputOutputToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { InputOutputToggle as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5wdXRPdXRwdXRUb2dnbGUuODc3MmY4ZWMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1JlcGwvSW5wdXRPdXRwdXRUb2dnbGUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgY2hlY2tlZDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdC5pbnB1dC1vdXRwdXQtdG9nZ2xlIHtcblx0XHRkaXNwbGF5OiBncmlkO1xuXHRcdHVzZXItc2VsZWN0OiBub25lO1xuXHRcdGZsZXg6IDA7XG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNDBweCAxZnI7XG5cdFx0Z3JpZC1nYXA6IDAuNWVtO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiA0MnB4O1xuXHRcdGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1zZWNvbmQpO1xuXHR9XG5cblx0aW5wdXQgeyBkaXNwbGF5OiBibG9jayB9XG5cdHNwYW4geyBjb2xvcjogI2NjYyB9XG5cdC5hY3RpdmUgeyBjb2xvcjogIzU1NSB9XG48L3N0eWxlPlxuXG48bGFiZWwgY2xhc3M9XCJpbnB1dC1vdXRwdXQtdG9nZ2xlXCI+XG5cdDxzcGFuIGNsYXNzOmFjdGl2ZT17IWNoZWNrZWR9IHN0eWxlPVwidGV4dC1hbGlnbjogcmlnaHRcIj5pbnB1dDwvc3Bhbj5cblx0PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGJpbmQ6Y2hlY2tlZD5cblx0PHNwYW4gY2xhc3M6YWN0aXZlPXtjaGVja2VkfT5vdXRwdXQ8L3NwYW4+XG48L2xhYmVsPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4Q0F1QnNCLEdBQU87Ozs7Ozs2Q0FFUixHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FGTixHQUFPOzs7Ozs7Ozs4Q0FFUixHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXhCaEIsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
