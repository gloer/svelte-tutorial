import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, D as validate_each_argument, v as validate_slots, e as element, p as space, A as text, a as claim_element, b as children, f as detach_dev, q as claim_space, B as claim_text, g as attr_dev, h as add_location, j as insert_dev, w as append_dev, C as set_data_dev, K as query_selector_all, z as noop, F as destroy_each } from './client.2d8aba47.js';

/* src/routes/faq/index.svelte generated by Svelte v3.31.0 */

const file = "src/routes/faq/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (24:1) {#each faqs as faq}
function create_each_block(ctx) {
	let article;
	let h2;
	let span;
	let span_id_value;
	let t0;
	let a;
	let t1;
	let a_href_value;
	let a_title_value;
	let t2;
	let t3_value = /*faq*/ ctx[1].metadata.question + "";
	let t3;
	let t4;
	let p;
	let raw_value = /*faq*/ ctx[1].answer + "";
	let t5;

	const block = {
		c: function create() {
			article = element("article");
			h2 = element("h2");
			span = element("span");
			t0 = space();
			a = element("a");
			t1 = text(" ");
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			p = element("p");
			t5 = space();
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			h2 = claim_element(article_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			span = claim_element(h2_nodes, "SPAN", { id: true, class: true });
			children(span).forEach(detach_dev);
			t0 = claim_space(h2_nodes);

			a = claim_element(h2_nodes, "A", {
				class: true,
				rel: true,
				href: true,
				title: true
			});

			var a_nodes = children(a);
			t1 = claim_text(a_nodes, " ");
			a_nodes.forEach(detach_dev);
			t2 = claim_space(h2_nodes);
			t3 = claim_text(h2_nodes, t3_value);
			h2_nodes.forEach(detach_dev);
			t4 = claim_space(article_nodes);
			p = claim_element(article_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach_dev);
			t5 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "id", span_id_value = /*faq*/ ctx[1].fragment);
			attr_dev(span, "class", "offset-anchor");
			add_location(span, file, 27, 3, 621);
			attr_dev(a, "class", "anchor");
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "faq#" + /*faq*/ ctx[1].fragment);
			attr_dev(a, "title", a_title_value = /*faq*/ ctx[1].question);
			add_location(a, file, 28, 3, 678);
			attr_dev(h2, "class", "svelte-1ty6sog");
			add_location(h2, file, 26, 3, 613);
			attr_dev(p, "class", "svelte-1ty6sog");
			add_location(p, file, 31, 3, 810);
			attr_dev(article, "class", "faq svelte-1ty6sog");
			add_location(article, file, 25, 2, 588);
		},
		m: function mount(target, anchor) {
			insert_dev(target, article, anchor);
			append_dev(article, h2);
			append_dev(h2, span);
			append_dev(h2, t0);
			append_dev(h2, a);
			append_dev(a, t1);
			append_dev(h2, t2);
			append_dev(h2, t3);
			append_dev(article, t4);
			append_dev(article, p);
			p.innerHTML = raw_value;
			append_dev(article, t5);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*faqs*/ 1 && span_id_value !== (span_id_value = /*faq*/ ctx[1].fragment)) {
				attr_dev(span, "id", span_id_value);
			}

			if (dirty & /*faqs*/ 1 && a_href_value !== (a_href_value = "faq#" + /*faq*/ ctx[1].fragment)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*faqs*/ 1 && a_title_value !== (a_title_value = /*faq*/ ctx[1].question)) {
				attr_dev(a, "title", a_title_value);
			}

			if (dirty & /*faqs*/ 1 && t3_value !== (t3_value = /*faq*/ ctx[1].metadata.question + "")) set_data_dev(t3, t3_value);
			if (dirty & /*faqs*/ 1 && raw_value !== (raw_value = /*faq*/ ctx[1].answer + "")) p.innerHTML = raw_value;		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(24:1) {#each faqs as faq}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta0;
	let meta1;
	let meta2;
	let t0;
	let div;
	let h1;
	let t1;
	let t2;
	let each_value = /*faqs*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = text("Frequently Asked Questions");
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-r4p7co\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Frequently Asked Questions");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Frequently Asked Questions • Svelte";
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte FAQ");
			add_location(meta0, file, 16, 1, 329);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", description);
			add_location(meta1, file, 17, 1, 379);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", description);
			add_location(meta2, file, 18, 1, 436);
			add_location(h1, file, 22, 1, 528);
			attr_dev(div, "class", "faqs stretch svelte-1ty6sog");
			add_location(div, file, 21, 0, 500);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t1);
			append_dev(div, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*faqs*/ 1) {
				each_value = /*faqs*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const faqs = await this.fetch(`faq.json`).then(r => r.json());
	return { faqs };
}

const description = "Frequently Asked Questions about Svelte";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Faq", slots, []);
	let { faqs } = $$props;
	const writable_props = ["faqs"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Faq> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("faqs" in $$props) $$invalidate(0, faqs = $$props.faqs);
	};

	$$self.$capture_state = () => ({ preload, description, faqs });

	$$self.$inject_state = $$props => {
		if ("faqs" in $$props) $$invalidate(0, faqs = $$props.faqs);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [faqs];
}

class Faq extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { faqs: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Faq",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*faqs*/ ctx[0] === undefined && !("faqs" in props)) {
			console.warn("<Faq> was created without expected prop 'faqs'");
		}
	}

	get faqs() {
		throw new Error("<Faq>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set faqs(value) {
		throw new Error("<Faq>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Faq;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMWJjZWMxZTguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvZmFxL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG5cdFx0Y29uc3QgZmFxcyA9IGF3YWl0IHRoaXMuZmV0Y2goYGZhcS5qc29uYCkudGhlbihyID0+IHIuanNvbigpKTtcblx0XHRyZXR1cm4geyBmYXFzIH07XG5cdH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuXHRjb25zdCBkZXNjcmlwdGlvbiA9IFwiRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgYWJvdXQgU3ZlbHRlXCJcblxuXHRleHBvcnQgbGV0IGZhcXM7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+RnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMg4oCiwqBTdmVsdGU8L3RpdGxlPlxuXG5cdDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnRpdGxlXCIgY29udGVudD1cIlN2ZWx0ZSBGQVFcIj5cblx0PG1ldGEgbmFtZT1cInR3aXR0ZXI6ZGVzY3JpcHRpb25cIiBjb250ZW50PXtkZXNjcmlwdGlvbn0+XG5cdDxtZXRhIG5hbWU9XCJEZXNjcmlwdGlvblwiIGNvbnRlbnQ9e2Rlc2NyaXB0aW9ufT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxkaXYgY2xhc3M9J2ZhcXMgc3RyZXRjaCc+XG5cdDxoMT5GcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9uczwvaDE+XG5cdHsjZWFjaCBmYXFzIGFzIGZhcX1cblxuXHRcdDxhcnRpY2xlIGNsYXNzPSdmYXEnPlxuXHRcdFx0PGgyPlxuXHRcdFx0PHNwYW4gaWQ9e2ZhcS5mcmFnbWVudH0gY2xhc3M9XCJvZmZzZXQtYW5jaG9yXCI+PC9zcGFuPlxuXHRcdFx0PGEgY2xhc3M9XCJhbmNob3JcIiByZWw9J3ByZWZldGNoJyBocmVmPSdmYXEje2ZhcS5mcmFnbWVudH0nIHRpdGxlPSd7ZmFxLnF1ZXN0aW9ufSc+Jm5ic3A7PC9hPlxuXHRcdFx0e2ZhcS5tZXRhZGF0YS5xdWVzdGlvbn1cblx0XHRcdDwvaDI+XG5cdFx0XHQ8cD57QGh0bWwgZmFxLmFuc3dlcn08L3A+XG5cdFx0PC9hcnRpY2xlPlxuXHR7L2VhY2h9XG48L2Rpdj5cblxuPHN0eWxlPlxuXHQuZmFxcyB7XG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuXHRcdGdyaWQtZ2FwOiAxZW07XG5cdFx0bWluLWhlaWdodDogY2FsYygxMDB2aCAtIHZhcigtLW5hdi1oKSk7XG5cdFx0cGFkZGluZzogdmFyKC0tdG9wLW9mZnNldCkgdmFyKC0tc2lkZS1uYXYpIDZyZW0gdmFyKC0tc2lkZS1uYXYpO1xuXHRcdG1heC13aWR0aDogdmFyKC0tbWFpbi13aWR0aCk7XG5cdFx0bWFyZ2luOiAwIGF1dG87XG5cdH1cblxuXHRoMiB7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRcdG1hcmdpbjogMy4ycmVtIDAgMXJlbSAwO1xuXHRcdGNvbG9yOiB2YXIoLS10ZXh0KTtcblx0XHRtYXgtd2lkdGg6IDE4ZW07XG5cdFx0Zm9udC1zaXplOiB2YXIoLS1oMyk7XG5cdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0fVxuXG5cdC5mYXE6Zmlyc3QtY2hpbGQge1xuXHRcdG1hcmdpbjogMCAwIDJyZW0gMDtcblx0XHRwYWRkaW5nOiAwIDAgNHJlbSAwO1xuXHRcdGJvcmRlci1ib3R0b206IHZhcigtLWJvcmRlci13KSBzb2xpZCAjNjc2Nzc4NWI7IC8qIGJhc2VkIG9uIC0tc2Vjb25kICovXG5cdH1cblxuXHQuZmFxOmZpcnN0LWNoaWxkIGgyIHtcblx0XHRmb250LXNpemU6IDRyZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0XHRjb2xvcjogdmFyKC0tc2Vjb25kKTtcblx0fVxuXG5cdC5mYXEgcCB7XG5cdFx0Zm9udC1zaXplOiB2YXIoLS1oNSk7XG5cdFx0bWF4LXdpZHRoOiAzMGVtO1xuXHRcdGNvbG9yOiB2YXIoLS1zZWNvbmQpO1xuXHR9XG5cblx0Omdsb2JhbCguZmFxcyAuZmFxIHVsKSB7XG5cdFx0bWFyZ2luLWxlZnQ6IDMuMnJlbTtcblx0fVxuXG5cdC5mYXFzIDpnbG9iYWwoLmFuY2hvcikge1xuXHRcdHRvcDogY2FsYygodmFyKC0taDMpIC0gMjRweCkgLyAyKTtcblx0fVxuXG5cdEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuXHRcdC5mYXFzIDpnbG9iYWwoLmFuY2hvcikge1xuXHRcdFx0dHJhbnNmb3JtOiBzY2FsZSgwLjYpO1xuXHRcdFx0b3BhY2l0eTogMTtcblx0XHRcdGxlZnQ6IC0xLjBlbTtcblx0XHR9XG5cdH1cbjwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQTZCSSxHQUFHLElBQUMsUUFBUSxDQUFDLFFBQVE7Ozs7eUJBRVosR0FBRyxJQUFDLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBSlYsR0FBRyxJQUFDLFFBQVE7Ozs7O3VEQUNzQixHQUFHLElBQUMsUUFBUTtnREFBVyxHQUFHLElBQUMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dFQURyRSxHQUFHLElBQUMsUUFBUTs7OzsrRUFDc0IsR0FBRyxJQUFDLFFBQVE7Ozs7d0VBQVcsR0FBRyxJQUFDLFFBQVE7Ozs7OERBQzlFLEdBQUcsSUFBQyxRQUFRLENBQUMsUUFBUTtnRUFFWixHQUFHLElBQUMsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBUmYsR0FBSTs7OztnQ0FBVCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQU5vQyxXQUFXOzs7OEJBQ25CLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBS3RDLEdBQUk7Ozs7K0JBQVQsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXRCZ0IsT0FBTztPQUN0QixJQUFJLFNBQVMsSUFBSSxDQUFDLEtBQUssYUFBYSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJO1VBQ2pELElBQUk7OztNQUtSLFdBQVcsR0FBRyx5Q0FBeUM7Ozs7O09BRWxELElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
