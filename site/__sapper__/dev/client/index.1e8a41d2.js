import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, D as validate_each_argument, v as validate_slots, e as element, A as text, p as space, a as claim_element, b as children, B as claim_text, f as detach_dev, q as claim_space, g as attr_dev, h as add_location, j as insert_dev, w as append_dev, C as set_data_dev, F as destroy_each, z as noop, O as toggle_class, G as onMount, a9 as goto, H as binding_callbacks, M as bind, l as create_component, m as claim_component, n as mount_component, N as add_flush_callback, t as transition_in, k as transition_out, o as destroy_component, K as query_selector_all, x as add_render_callback, P as add_resize_listener, J as check_outros, I as group_outros } from './client.2d8aba47.js';
import { g as getFragment } from './navigation.84703ebc.js';
import { R as Repl } from './Repl.246365e1.js';
import { p as process_example } from './examples.83e383fd.js';
import { s as svelteUrl, r as rollupUrl, m as mapbox_setup, S as ScreenToggle } from './config.cc681bdb.js';

/* src/routes/examples/_TableOfContents.svelte generated by Svelte v3.31.0 */

const file = "src/routes/examples/_TableOfContents.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (109:5) {#if example.slug === active_section}
function create_if_block(ctx) {
	let a;
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text("REPL");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "REPL");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "repl/" + /*example*/ ctx[6].slug);
			attr_dev(a, "class", "repl-link svelte-agypo9");
			add_location(a, file, 109, 6, 2160);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sections*/ 1 && a_href_value !== (a_href_value = "repl/" + /*example*/ ctx[6].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(109:5) {#if example.slug === active_section}",
		ctx
	});

	return block;
}

// (92:3) {#each section.examples as example}
function create_each_block_1(ctx) {
	let div;
	let a;
	let img;
	let img_alt_value;
	let img_src_value;
	let t0;
	let span;
	let t1_value = /*example*/ ctx[6].title + "";
	let t1;
	let a_href_value;
	let t2;
	let if_block = /*example*/ ctx[6].slug === /*active_section*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { class: true, alt: true, src: true });
			t0 = claim_space(a_nodes);
			span = claim_element(a_nodes, "SPAN", {});
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "thumbnail svelte-agypo9");
			attr_dev(img, "alt", img_alt_value = "" + (/*example*/ ctx[6].title + " thumbnail"));
			if (img.src !== (img_src_value = "examples/thumbnails/" + /*example*/ ctx[6].slug + ".jpg")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 101, 6, 1941);
			add_location(span, file, 106, 6, 2072);
			attr_dev(a, "href", a_href_value = "examples#" + /*example*/ ctx[6].slug);
			attr_dev(a, "class", "row svelte-agypo9");
			toggle_class(a, "active", /*example*/ ctx[6].slug === /*active_section*/ ctx[1]);
			toggle_class(a, "loading", /*isLoading*/ ctx[2]);
			add_location(a, file, 96, 5, 1791);
			attr_dev(div, "class", "row svelte-agypo9");
			toggle_class(div, "active", /*example*/ ctx[6].slug === /*active_section*/ ctx[1]);
			toggle_class(div, "loading", /*isLoading*/ ctx[2]);
			add_location(div, file, 92, 4, 1680);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, img);
			append_dev(a, t0);
			append_dev(a, span);
			append_dev(span, t1);
			append_dev(div, t2);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sections*/ 1 && img_alt_value !== (img_alt_value = "" + (/*example*/ ctx[6].title + " thumbnail"))) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*sections*/ 1 && img.src !== (img_src_value = "examples/thumbnails/" + /*example*/ ctx[6].slug + ".jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*sections*/ 1 && t1_value !== (t1_value = /*example*/ ctx[6].title + "")) set_data_dev(t1, t1_value);

			if (dirty & /*sections*/ 1 && a_href_value !== (a_href_value = "examples#" + /*example*/ ctx[6].slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*sections, active_section*/ 3) {
				toggle_class(a, "active", /*example*/ ctx[6].slug === /*active_section*/ ctx[1]);
			}

			if (dirty & /*isLoading*/ 4) {
				toggle_class(a, "loading", /*isLoading*/ ctx[2]);
			}

			if (/*example*/ ctx[6].slug === /*active_section*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*sections, active_section*/ 3) {
				toggle_class(div, "active", /*example*/ ctx[6].slug === /*active_section*/ ctx[1]);
			}

			if (dirty & /*isLoading*/ 4) {
				toggle_class(div, "loading", /*isLoading*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(92:3) {#each section.examples as example}",
		ctx
	});

	return block;
}

// (88:1) {#each sections as section}
function create_each_block(ctx) {
	let li;
	let span;
	let t0_value = /*section*/ ctx[3].title + "";
	let t0;
	let t1;
	let t2;
	let each_value_1 = /*section*/ ctx[3].examples;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			span = claim_element(li_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "section-title svelte-agypo9");
			add_location(span, file, 89, 3, 1585);
			attr_dev(li, "class", "svelte-agypo9");
			add_location(li, file, 88, 2, 1577);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span);
			append_dev(span, t0);
			append_dev(li, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}

			append_dev(li, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sections*/ 1 && t0_value !== (t0_value = /*section*/ ctx[3].title + "")) set_data_dev(t0, t0_value);

			if (dirty & /*sections, active_section, isLoading*/ 7) {
				each_value_1 = /*section*/ ctx[3].examples;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(88:1) {#each sections as section}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let ul;
	let each_value = /*sections*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "examples-toc svelte-agypo9");
			add_location(ul, file, 86, 0, 1520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*sections, active_section, isLoading*/ 7) {
				each_value = /*sections*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TableOfContents", slots, []);
	let { sections = [] } = $$props;
	let { active_section = null } = $$props;
	let { isLoading = false } = $$props;
	const writable_props = ["sections", "active_section", "isLoading"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TableOfContents> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("sections" in $$props) $$invalidate(0, sections = $$props.sections);
		if ("active_section" in $$props) $$invalidate(1, active_section = $$props.active_section);
		if ("isLoading" in $$props) $$invalidate(2, isLoading = $$props.isLoading);
	};

	$$self.$capture_state = () => ({ sections, active_section, isLoading });

	$$self.$inject_state = $$props => {
		if ("sections" in $$props) $$invalidate(0, sections = $$props.sections);
		if ("active_section" in $$props) $$invalidate(1, active_section = $$props.active_section);
		if ("isLoading" in $$props) $$invalidate(2, isLoading = $$props.isLoading);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [sections, active_section, isLoading];
}

class TableOfContents extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			sections: 0,
			active_section: 1,
			isLoading: 2
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TableOfContents",
			options,
			id: create_fragment.name
		});
	}

	get sections() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active_section() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active_section(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isLoading() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isLoading(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/examples/index.svelte generated by Svelte v3.31.0 */
const file$1 = "src/routes/examples/index.svelte";

// (120:1) {#if mobile}
function create_if_block$1(ctx) {
	let screentoggle;
	let updating_offset;
	let current;

	function screentoggle_offset_binding(value) {
		/*screentoggle_offset_binding*/ ctx[12].call(null, value);
	}

	let screentoggle_props = { labels: ["index", "input", "output"] };

	if (/*offset*/ ctx[5] !== void 0) {
		screentoggle_props.offset = /*offset*/ ctx[5];
	}

	screentoggle = new ScreenToggle({
			props: screentoggle_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(screentoggle, "offset", screentoggle_offset_binding));

	const block = {
		c: function create() {
			create_component(screentoggle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(screentoggle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(screentoggle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const screentoggle_changes = {};

			if (!updating_offset && dirty & /*offset*/ 32) {
				updating_offset = true;
				screentoggle_changes.offset = /*offset*/ ctx[5];
				add_flush_callback(() => updating_offset = false);
			}

			screentoggle.$set(screentoggle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(screentoggle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(screentoggle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(screentoggle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(120:1) {#if mobile}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let title_value;
	let meta0;
	let meta1;
	let meta2;
	let t0;
	let h1;
	let t1;
	let t2;
	let div2;
	let div1;
	let tableofcontents;
	let t3;
	let div0;
	let repl_1;
	let div1_class_value;
	let t4;
	let div2_resize_listener;
	let current;
	document.title = title_value = "" + (/*title*/ ctx[7] + " " + (/*title*/ ctx[7] ? "•" : "") + " Svelte Examples");

	tableofcontents = new TableOfContents({
			props: {
				sections: /*sections*/ ctx[0],
				active_section: /*active_slug*/ ctx[1],
				isLoading: /*isLoading*/ ctx[6]
			},
			$$inline: true
		});

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl,
		rollupUrl,
		orientation: /*replOrientation*/ ctx[8],
		fixed: /*mobile*/ ctx[4],
		relaxed: true,
		injectedJS: mapbox_setup
	};

	repl_1 = new Repl({ props: repl_1_props, $$inline: true });
	/*repl_1_binding*/ ctx[11](repl_1);
	let if_block = /*mobile*/ ctx[4] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			h1 = element("h1");
			t1 = text("Examples");
			t2 = space();
			div2 = element("div");
			div1 = element("div");
			create_component(tableofcontents.$$.fragment);
			t3 = space();
			div0 = element("div");
			create_component(repl_1.$$.fragment);
			t4 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1hcwu6s\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Examples");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(tableofcontents.$$.fragment, div1_nodes);
			t3 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(repl_1.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte examples");
			add_location(meta0, file$1, 97, 1, 2414);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file$1, 98, 1, 2469);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive example Svelte apps");
			add_location(meta2, file$1, 99, 1, 2547);
			attr_dev(h1, "class", "visually-hidden");
			add_location(h1, file$1, 102, 0, 2631);
			attr_dev(div0, "class", "repl-container svelte-1eucojc");
			toggle_class(div0, "loading", /*isLoading*/ ctx[6]);
			add_location(div0, file$1, 106, 2, 2847);
			attr_dev(div1, "class", div1_class_value = "viewport offset-" + /*offset*/ ctx[5] + " svelte-1eucojc");
			add_location(div1, file$1, 104, 1, 2732);
			attr_dev(div2, "class", "examples-container svelte-1eucojc");
			add_render_callback(() => /*div2_elementresize_handler*/ ctx[13].call(div2));
			add_location(div2, file$1, 103, 0, 2673);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			mount_component(tableofcontents, div1, null);
			append_dev(div1, t3);
			append_dev(div1, div0);
			mount_component(repl_1, div0, null);
			append_dev(div2, t4);
			if (if_block) if_block.m(div2, null);
			div2_resize_listener = add_resize_listener(div2, /*div2_elementresize_handler*/ ctx[13].bind(div2));
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 128) && title_value !== (title_value = "" + (/*title*/ ctx[7] + " " + (/*title*/ ctx[7] ? "•" : "") + " Svelte Examples"))) {
				document.title = title_value;
			}

			const tableofcontents_changes = {};
			if (dirty & /*sections*/ 1) tableofcontents_changes.sections = /*sections*/ ctx[0];
			if (dirty & /*active_slug*/ 2) tableofcontents_changes.active_section = /*active_slug*/ ctx[1];
			if (dirty & /*isLoading*/ 64) tableofcontents_changes.isLoading = /*isLoading*/ ctx[6];
			tableofcontents.$set(tableofcontents_changes);
			const repl_1_changes = {};
			if (dirty & /*replOrientation*/ 256) repl_1_changes.orientation = /*replOrientation*/ ctx[8];
			if (dirty & /*mobile*/ 16) repl_1_changes.fixed = /*mobile*/ ctx[4];
			repl_1.$set(repl_1_changes);

			if (dirty & /*isLoading*/ 64) {
				toggle_class(div0, "loading", /*isLoading*/ ctx[6]);
			}

			if (!current || dirty & /*offset*/ 32 && div1_class_value !== (div1_class_value = "viewport offset-" + /*offset*/ ctx[5] + " svelte-1eucojc")) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (/*mobile*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*mobile*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tableofcontents.$$.fragment, local);
			transition_in(repl_1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(tableofcontents.$$.fragment, local);
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div2);
			destroy_component(tableofcontents);
			/*repl_1_binding*/ ctx[11](null);
			destroy_component(repl_1);
			if (if_block) if_block.d();
			div2_resize_listener();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const sections = await this.fetch(`examples.json`).then(r => r.json());

	const title_by_slug = sections.reduce(
		(acc, { examples }) => {
			examples.forEach(({ slug, title }) => {
				acc[slug] = title;
			});

			return acc;
		},
		{}
	);

	return { sections, title_by_slug };
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Examples", slots, []);
	let { sections } = $$props;
	let { title_by_slug } = $$props;
	let active_slug;
	let width;
	let offset = 1;
	let repl;
	let isLoading = false;
	const cache = {};

	function showExampleCodeOnChange() {
		$$invalidate(5, offset = 1);
	}

	onMount(() => {
		const onhashchange = () => {
			$$invalidate(1, active_slug = getFragment());
		};

		window.addEventListener("hashchange", onhashchange, false);
		const fragment = getFragment();

		if (fragment) {
			$$invalidate(1, active_slug = fragment);
		} else {
			$$invalidate(1, active_slug = first_slug);
			goto(`examples#${active_slug}`);
		}

		return () => {
			window.removeEventListener("hashchange", onhashchange, false);
		};
	});

	const writable_props = ["sections", "title_by_slug"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Examples> was created with unknown prop '${key}'`);
	});

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			repl = $$value;
			$$invalidate(3, repl);
		});
	}

	function screentoggle_offset_binding(value) {
		offset = value;
		$$invalidate(5, offset);
	}

	function div2_elementresize_handler() {
		width = this.clientWidth;
		$$invalidate(2, width);
	}

	$$self.$$set = $$props => {
		if ("sections" in $$props) $$invalidate(0, sections = $$props.sections);
		if ("title_by_slug" in $$props) $$invalidate(9, title_by_slug = $$props.title_by_slug);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		goto,
		Repl,
		ScreenToggle,
		mapbox_setup,
		rollupUrl,
		svelteUrl,
		process_example,
		getFragment,
		TableOfContents,
		sections,
		title_by_slug,
		active_slug,
		width,
		offset,
		repl,
		isLoading,
		cache,
		showExampleCodeOnChange,
		title,
		first_slug,
		mobile,
		replOrientation
	});

	$$self.$inject_state = $$props => {
		if ("sections" in $$props) $$invalidate(0, sections = $$props.sections);
		if ("title_by_slug" in $$props) $$invalidate(9, title_by_slug = $$props.title_by_slug);
		if ("active_slug" in $$props) $$invalidate(1, active_slug = $$props.active_slug);
		if ("width" in $$props) $$invalidate(2, width = $$props.width);
		if ("offset" in $$props) $$invalidate(5, offset = $$props.offset);
		if ("repl" in $$props) $$invalidate(3, repl = $$props.repl);
		if ("isLoading" in $$props) $$invalidate(6, isLoading = $$props.isLoading);
		if ("title" in $$props) $$invalidate(7, title = $$props.title);
		if ("first_slug" in $$props) first_slug = $$props.first_slug;
		if ("mobile" in $$props) $$invalidate(4, mobile = $$props.mobile);
		if ("replOrientation" in $$props) $$invalidate(8, replOrientation = $$props.replOrientation);
	};

	let title;
	let first_slug;
	let mobile;
	let replOrientation;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*title_by_slug, active_slug*/ 514) {
			 $$invalidate(7, title = title_by_slug[active_slug] || "");
		}

		if ($$self.$$.dirty & /*sections*/ 1) {
			 first_slug = sections[0].examples[0].slug;
		}

		if ($$self.$$.dirty & /*width*/ 4) {
			 $$invalidate(4, mobile = width < 768); // note: same as per media query below
		}

		if ($$self.$$.dirty & /*mobile, width*/ 20) {
			 $$invalidate(8, replOrientation = mobile || width > 1080 ? "columns" : "rows");
		}

		if ($$self.$$.dirty & /*repl, active_slug, cache*/ 1034) {
			 if (repl && active_slug) {
				if (active_slug in cache) {
					repl.set({ components: cache[active_slug] });
					showExampleCodeOnChange();
				} else {
					$$invalidate(6, isLoading = true);

					fetch(`examples/${active_slug}.json`).then(async response => {
						if (response.ok) {
							const { files } = await response.json();
							return process_example(files);
						}
					}).then(components => {
						$$invalidate(10, cache[active_slug] = components, cache);
						repl.set({ components });
						showExampleCodeOnChange();
						$$invalidate(6, isLoading = false);
					}).catch(() => {
						$$invalidate(6, isLoading = false);
					});
				}
			}
		}
	};

	return [
		sections,
		active_slug,
		width,
		repl,
		mobile,
		offset,
		isLoading,
		title,
		replOrientation,
		title_by_slug,
		cache,
		repl_1_binding,
		screentoggle_offset_binding,
		div2_elementresize_handler
	];
}

class Examples extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { sections: 0, title_by_slug: 9 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Examples",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*sections*/ ctx[0] === undefined && !("sections" in props)) {
			console.warn("<Examples> was created without expected prop 'sections'");
		}

		if (/*title_by_slug*/ ctx[9] === undefined && !("title_by_slug" in props)) {
			console.warn("<Examples> was created without expected prop 'title_by_slug'");
		}
	}

	get sections() {
		throw new Error("<Examples>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<Examples>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title_by_slug() {
		throw new Error("<Examples>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title_by_slug(value) {
		throw new Error("<Examples>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Examples;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
