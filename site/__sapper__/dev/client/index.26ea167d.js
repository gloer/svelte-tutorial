import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, D as validate_each_argument, v as validate_slots, e as element, A as text, p as space, a as claim_element, b as children, B as claim_text, f as detach_dev, q as claim_space, g as attr_dev, h as add_location, j as insert_dev, w as append_dev, C as set_data_dev, K as query_selector_all, z as noop, F as destroy_each } from './client.2d8aba47.js';

/* src/routes/blog/index.svelte generated by Svelte v3.31.0 */

const file = "src/routes/blog/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (23:1) {#each posts as post}
function create_each_block(ctx) {
	let article;
	let a;
	let h2;
	let t0_value = /*post*/ ctx[1].metadata.title + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*post*/ ctx[1].metadata.description + "";
	let t2;
	let a_href_value;
	let t3;
	let article_data_pubdate_value;

	const block = {
		c: function create() {
			article = element("article");
			a = element("a");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true, "data-pubdate": true });
			var article_nodes = children(article);

			a = claim_element(article_nodes, "A", {
				class: true,
				rel: true,
				href: true,
				title: true
			});

			var a_nodes = children(a);
			h2 = claim_element(a_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-1v4cdw2");
			add_location(h2, file, 25, 4, 839);
			attr_dev(p, "class", "svelte-1v4cdw2");
			add_location(p, file, 26, 4, 874);
			attr_dev(a, "class", "no-underline svelte-1v4cdw2");
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "blog/" + /*post*/ ctx[1].slug);
			attr_dev(a, "title", "Read the article »");
			add_location(a, file, 24, 3, 744);
			attr_dev(article, "class", "post svelte-1v4cdw2");
			attr_dev(article, "data-pubdate", article_data_pubdate_value = /*post*/ ctx[1].metadata.dateString);
			add_location(article, file, 23, 2, 678);
		},
		m: function mount(target, anchor) {
			insert_dev(target, article, anchor);
			append_dev(article, a);
			append_dev(a, h2);
			append_dev(h2, t0);
			append_dev(a, t1);
			append_dev(a, p);
			append_dev(p, t2);
			append_dev(article, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && t0_value !== (t0_value = /*post*/ ctx[1].metadata.title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*posts*/ 1 && t2_value !== (t2_value = /*post*/ ctx[1].metadata.description + "")) set_data_dev(t2, t2_value);

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = "blog/" + /*post*/ ctx[1].slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*posts*/ 1 && article_data_pubdate_value !== (article_data_pubdate_value = /*post*/ ctx[1].metadata.dateString)) {
				attr_dev(article, "data-pubdate", article_data_pubdate_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(23:1) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let link;
	let meta0;
	let meta1;
	let meta2;
	let t0;
	let h1;
	let t1;
	let t2;
	let div;
	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			link = element("link");
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			h1 = element("h1");
			t1 = text("Blog");
			t2 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1dp4qdr\"]", document.head);

			link = claim_element(head_nodes, "LINK", {
				rel: true,
				type: true,
				title: true,
				href: true
			});

			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Blog");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Blog • Svelte";
			attr_dev(link, "rel", "alternate");
			attr_dev(link, "type", "application/rss+xml");
			attr_dev(link, "title", "Svelte blog");
			attr_dev(link, "href", "https://svelte.dev/blog/rss.xml");
			add_location(link, file, 13, 1, 246);
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte blog");
			add_location(meta0, file, 15, 1, 357);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Articles about Svelte and UI development");
			add_location(meta1, file, 16, 1, 408);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Articles about Svelte and UI development");
			add_location(meta2, file, 17, 1, 494);
			attr_dev(h1, "class", "visually-hidden");
			add_location(h1, file, 20, 0, 587);
			attr_dev(div, "class", "posts stretch svelte-1v4cdw2");
			add_location(div, file, 21, 0, 625);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, link);
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(link);
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const posts = await this.fetch(`blog.json`).then(r => r.json());
	return { posts };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Blog", slots, []);
	let { posts } = $$props;
	const writable_props = ["posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Blog> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => ({ preload, posts });

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts];
}

class Blog extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blog",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Blog> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Blog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Blog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Blog;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMjZlYTE2N2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYmxvZy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHRcdGNvbnN0IHBvc3RzID0gYXdhaXQgdGhpcy5mZXRjaChgYmxvZy5qc29uYCkudGhlbihyID0+IHIuanNvbigpKTtcblx0XHRyZXR1cm4geyBwb3N0cyB9O1xuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cblx0ZXhwb3J0IGxldCBwb3N0cztcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5CbG9nIOKAosKgU3ZlbHRlPC90aXRsZT5cblx0PGxpbmsgcmVsPVwiYWx0ZXJuYXRlXCIgdHlwZT1cImFwcGxpY2F0aW9uL3Jzcyt4bWxcIiB0aXRsZT1cIlN2ZWx0ZSBibG9nXCIgaHJlZj1cImh0dHBzOi8vc3ZlbHRlLmRldi9ibG9nL3Jzcy54bWxcIj5cblxuXHQ8bWV0YSBuYW1lPVwidHdpdHRlcjp0aXRsZVwiIGNvbnRlbnQ9XCJTdmVsdGUgYmxvZ1wiPlxuXHQ8bWV0YSBuYW1lPVwidHdpdHRlcjpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJBcnRpY2xlcyBhYm91dCBTdmVsdGUgYW5kIFVJIGRldmVsb3BtZW50XCI+XG5cdDxtZXRhIG5hbWU9XCJEZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJBcnRpY2xlcyBhYm91dCBTdmVsdGUgYW5kIFVJIGRldmVsb3BtZW50XCI+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDEgY2xhc3M9XCJ2aXN1YWxseS1oaWRkZW5cIj5CbG9nPC9oMT5cbjxkaXYgY2xhc3M9J3Bvc3RzIHN0cmV0Y2gnPlxuXHR7I2VhY2ggcG9zdHMgYXMgcG9zdH1cblx0XHQ8YXJ0aWNsZSBjbGFzcz0ncG9zdCcgZGF0YS1wdWJkYXRlPXtwb3N0Lm1ldGFkYXRhLmRhdGVTdHJpbmd9PlxuXHRcdFx0PGEgY2xhc3M9XCJuby11bmRlcmxpbmVcIiByZWw9J3ByZWZldGNoJyBocmVmPSdibG9nL3twb3N0LnNsdWd9JyB0aXRsZT0nUmVhZCB0aGUgYXJ0aWNsZSDCuyc+XG5cdFx0XHRcdDxoMj57cG9zdC5tZXRhZGF0YS50aXRsZX08L2gyPlxuXHRcdFx0XHQ8cD57cG9zdC5tZXRhZGF0YS5kZXNjcmlwdGlvbn08L3A+XG5cdFx0XHQ8L2E+XG5cdFx0PC9hcnRpY2xlPlxuXHR7L2VhY2h9XG48L2Rpdj5cblxuPHN0eWxlPlxuXHQucG9zdHMge1xuXHRcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcblx0XHRncmlkLWdhcDogMWVtO1xuXHRcdG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSB2YXIoLS1uYXYtaCkpO1xuXHRcdHBhZGRpbmc6IHZhcigtLXRvcC1vZmZzZXQpIHZhcigtLXNpZGUtbmF2KSA2cmVtIHZhcigtLXNpZGUtbmF2KTtcblx0XHRtYXgtd2lkdGg6IHZhcigtLW1haW4td2lkdGgpO1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHR9XG5cblx0aDIge1xuXHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRtYXJnaW46IDMuMnJlbSAwIDAuNHJlbSAwO1xuXHRcdGNvbG9yOiB2YXIoLS10ZXh0KTtcblx0XHRtYXgtd2lkdGg6IDE4ZW07XG5cdFx0Zm9udC1zaXplOiB2YXIoLS1oMyk7XG5cdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0fVxuXG5cdC5wb3N0OmZpcnN0LWNoaWxkIHtcblx0XHRtYXJnaW46IDAgMCAycmVtIDA7XG5cdFx0cGFkZGluZzogMCAwIDRyZW0gMDtcblx0XHRib3JkZXItYm90dG9tOiB2YXIoLS1ib3JkZXItdykgc29saWQgIzY3Njc3ODViOyAvKiBiYXNlZCBvbiAtLXNlY29uZCAqL1xuXHR9XG5cblx0LnBvc3Q6Zmlyc3QtY2hpbGQgaDIge1xuXHRcdGZvbnQtc2l6ZTogNHJlbTtcblx0XHRmb250LXdlaWdodDogNDAwO1xuXHRcdGNvbG9yOiB2YXIoLS1zZWNvbmQpO1xuXHR9XG5cblx0LnBvc3Q6Zmlyc3QtY2hpbGQ6OmJlZm9yZSxcblx0LnBvc3Q6bnRoLWNoaWxkKDIpOjpiZWZvcmUge1xuXHRcdGNvbnRlbnQ6ICdMYXRlc3QgcG9zdCDigKIgJyBhdHRyKGRhdGEtcHViZGF0ZSk7XG5cdFx0Y29sb3I6IHZhcigtLWZsYXNoKTtcblx0XHRmb250LXNpemU6IHZhcigtLWg2KTtcblx0XHRmb250LXdlaWdodDogNDAwO1xuXHRcdGxldHRlci1zcGFjaW5nOiAuMDVlbTtcblx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHR9XG5cblx0LnBvc3Q6bnRoLWNoaWxkKDIpOjpiZWZvcmUge1xuXHRcdGNvbnRlbnQ6ICdPbGRlciBwb3N0cyc7XG5cdH1cblxuXHQucG9zdCBwIHtcblx0XHRmb250LXNpemU6IHZhcigtLWg1KTtcblx0XHRtYXgtd2lkdGg6IDMwZW07XG5cdFx0Y29sb3I6IHZhcigtLXNlY29uZCk7XG5cdH1cblxuXHQucG9zdCA+IGEgeyBkaXNwbGF5OiBibG9jayB9XG5cblx0LnBvc3RzIGE6aG92ZXIsXG5cdC5wb3N0cyBhOmhvdmVyID4gaDIge1xuXHRcdGNvbG9yOiB2YXIoLS1mbGFzaClcblx0fVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozt5QkF5QlMsR0FBSSxJQUFDLFFBQVEsQ0FBQyxLQUFLOzs7O3lCQUNwQixHQUFJLElBQUMsUUFBUSxDQUFDLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5REFGcUIsR0FBSSxJQUFDLElBQUk7Ozs7MkVBRHpCLEdBQUksSUFBQyxRQUFRLENBQUMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Z0VBRXJELEdBQUksSUFBQyxRQUFRLENBQUMsS0FBSztnRUFDcEIsR0FBSSxJQUFDLFFBQVEsQ0FBQyxXQUFXOztrRkFGcUIsR0FBSSxJQUFDLElBQUk7Ozs7b0dBRHpCLEdBQUksSUFBQyxRQUFRLENBQUMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUR0RCxHQUFLOzs7O2dDQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFBQyxHQUFLOzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFyQmdCLE9BQU87T0FDdEIsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLGNBQWMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSTtVQUNuRCxLQUFLOzs7Ozs7T0FLSixLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
