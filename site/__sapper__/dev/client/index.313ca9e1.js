import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, af as stores$1, V as validate_store, X as component_subscribe, U as getContext, e as element, A as text, p as space, a as claim_element, b as children, B as claim_text, f as detach_dev, q as claim_space, g as attr_dev, h as add_location, j as insert_dev, w as append_dev, y as listen_dev, z as noop, C as set_data_dev, T as run_all, L as globals, aa as Icon, Q as createEventDispatcher, l as create_component, m as claim_component, r as set_style, _ as set_input_value, n as mount_component, R as action_destroyer, I as group_outros, k as transition_out, J as check_outros, t as transition_in, a1 as prop_dev, o as destroy_component, ad as prevent_default, x as add_render_callback, G as onMount, a9 as goto, E as empty, O as toggle_class, H as binding_callbacks, M as bind, N as add_flush_callback, K as query_selector_all } from './client.2d8aba47.js';
import { R as Repl } from './Repl.246365e1.js';
import { I as InputOutputToggle } from './InputOutputToggle.8772f8ec.js';

/* src/routes/repl/[id]/_components/AppControls/UserMenu.svelte generated by Svelte v3.31.0 */
const file = "src/routes/repl/[id]/_components/AppControls/UserMenu.svelte";

// (18:1) {#if showMenu}
function create_if_block(ctx) {
	let div;
	let a;
	let t0;
	let t1;
	let button;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t0 = text("Your saved apps");
			t1 = space();
			button = element("button");
			t2 = text("Log out");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, "Your saved apps");
			a_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t2 = claim_text(button_nodes, "Log out");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "apps");
			attr_dev(a, "class", "svelte-1jk26jo");
			add_location(a, file, 19, 3, 479);
			attr_dev(button, "class", "svelte-1jk26jo");
			add_location(button, file, 20, 3, 517);
			attr_dev(div, "class", "menu svelte-1jk26jo");
			add_location(div, file, 18, 2, 457);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t0);
			append_dev(div, t1);
			append_dev(div, button);
			append_dev(button, t2);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*logout*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(18:1) {#if showMenu}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let span;
	let t0;
	let t1;
	let img;
	let img_alt_value;
	let img_src_value;
	let t2;
	let mounted;
	let dispose;
	let if_block = /*showMenu*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text(/*name*/ ctx[2]);
			t1 = space();
			img = element("img");
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, /*name*/ ctx[2]);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			img = claim_element(div_nodes, "IMG", { alt: true, src: true, class: true });
			t2 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1jk26jo");
			add_location(span, file, 14, 1, 362);
			attr_dev(img, "alt", img_alt_value = "" + (/*name*/ ctx[2] + " avatar"));
			if (img.src !== (img_src_value = /*$session*/ ctx[0].user.avatar)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1jk26jo");
			add_location(img, file, 15, 1, 383);
			attr_dev(div, "class", "user svelte-1jk26jo");
			add_location(div, file, 13, 0, 261);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t0);
			append_dev(div, t1);
			append_dev(div, img);
			append_dev(div, t2);
			if (if_block) if_block.m(div, null);

			if (!mounted) {
				dispose = [
					listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[5], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 4) set_data_dev(t0, /*name*/ ctx[2]);

			if (dirty & /*name*/ 4 && img_alt_value !== (img_alt_value = "" + (/*name*/ ctx[2] + " avatar"))) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*$session*/ 1 && img.src !== (img_src_value = /*$session*/ ctx[0].user.avatar)) {
				attr_dev(img, "src", img_src_value);
			}

			if (/*showMenu*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("UserMenu", slots, []);
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(0, $session = value));
	const { logout } = getContext("app");
	let showMenu = false;
	let name;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<UserMenu> was created with unknown prop '${key}'`);
	});

	const mouseenter_handler = () => $$invalidate(1, showMenu = true);
	const mouseleave_handler = () => $$invalidate(1, showMenu = false);

	$$self.$capture_state = () => ({
		getContext,
		stores: stores$1,
		session,
		logout,
		showMenu,
		name,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("showMenu" in $$props) $$invalidate(1, showMenu = $$props.showMenu);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$session*/ 1) {
			 $$invalidate(2, name = $session.user.name || $session.user.username);
		}
	};

	return [
		$session,
		showMenu,
		name,
		session,
		logout,
		mouseenter_handler,
		mouseleave_handler
	];
}

class UserMenu extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UserMenu",
			options,
			id: create_fragment.name
		});
	}
}

const table = [];
for (let n = 0; n < 256; n++) {
	let c = n;
	for (let k = 0; k < 8; k++) {
		c = c & 1 ? 0xEDB88320 ^ (c >>> 1) : c >>> 1;
	}
	table[n] = c;
}

var crc32 = bytes => {
	let sum = -1;
	for (const byte of bytes) {
		sum = (sum >>> 8) ^ table[(sum ^ byte) & 0xFF];
	}
	return sum ^ -1;
};

const int = (n, length) => {
	const out = [];
	while (length--) {
		out.push(n & 0xFF);
		n >>>= 8;
	}
	return out;
};

const toBytes = data => typeof data === 'string' ? [...data].map(char => char.charCodeAt(0)) : data;

var toArray = files => {
	let fileData = [];
	const centralDirectory = [];
	for (const { path, data } of files) {
		const dataBytes = toBytes(data);
		const pathBytes = toBytes(path);
		const commonHeader = [0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...int(crc32(dataBytes), 4), ...int(dataBytes.length, 4), ...int(dataBytes.length, 4), ...int(pathBytes.length, 2), 0x00, 0x00];
		centralDirectory.push(0x50, 0x4B, 0x01, 0x02, 0x14, 0x00, ...commonHeader, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...int(fileData.length, 4), ...pathBytes);
		fileData = [...fileData, 0x50, 0x4B, 0x03, 0x04, ...commonHeader, ...pathBytes, ...dataBytes];
	}
	return [...fileData, ...centralDirectory, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, ...int(files.length, 2), ...int(files.length, 2), ...int(centralDirectory.length, 4), ...int(fileData.length, 4), 0x00, 0x00];
};

var toBlob = files => new Blob([Uint8Array.from(toArray(files))], { type: 'application/zip' });

var toBuffer = files => Buffer.from(toArray(files));

var toAuto = files => (typeof Blob === 'undefined' ? toBuffer : toBlob)(files);

var doNotZip = /*#__PURE__*/Object.freeze({
	__proto__: null,
	toArray: toArray,
	toAuto: toAuto,
	toBlob: toBlob,
	toBuffer: toBuffer
});

var downloadBlob = (blob, filename) => {
	const url = URL.createObjectURL(blob);
	const link = document.createElement('a');
	link.href = url;
	link.download = filename;
	link.style.display = 'none';
	document.body.appendChild(link);
	link.click();
	URL.revokeObjectURL(url);
	link.remove();
};

function keyEvent(code) {
	return function (node, callback) {
		node.addEventListener('keydown', handleKeydown);

		function handleKeydown(event) {
			if (event.keyCode === code) {
				callback.call(this, event);
			}
		}

		return {
			destroy() {
				node.removeEventListener('keydown', handleKeydown);
			}
		};
	};
}

const enter = keyEvent(13);

const isMac = typeof navigator !== 'undefined' && navigator.platform === 'MacIntel';

/* src/routes/repl/[id]/_components/AppControls/index.svelte generated by Svelte v3.31.0 */

const { Error: Error_1 } = globals;
const file$1 = "src/routes/repl/[id]/_components/AppControls/index.svelte";

// (181:3) {:else}
function create_else_block_3(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: { name: "maximize" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(181:3) {:else}",
		ctx
	});

	return block;
}

// (179:3) {#if zen_mode}
function create_if_block_3(ctx) {
	let icon;
	let current;
	icon = new Icon({ props: { name: "close" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(179:3) {#if zen_mode}",
		ctx
	});

	return block;
}

// (193:3) {:else}
function create_else_block_2(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: { name: "git-branch" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(193:3) {:else}",
		ctx
	});

	return block;
}

// (191:3) {#if justForked}
function create_if_block_2(ctx) {
	let icon;
	let current;
	icon = new Icon({ props: { name: "check" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(191:3) {#if justForked}",
		ctx
	});

	return block;
}

// (201:3) {:else}
function create_else_block_1(ctx) {
	let icon;
	let current;
	icon = new Icon({ props: { name: "save" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(201:3) {:else}",
		ctx
	});

	return block;
}

// (199:3) {#if justSaved}
function create_if_block_1(ctx) {
	let icon;
	let current;
	icon = new Icon({ props: { name: "check" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(199:3) {#if justSaved}",
		ctx
	});

	return block;
}

// (208:2) {:else}
function create_else_block(ctx) {
	let button;
	let icon;
	let t0;
	let span;
	let t1;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: { name: "log-in" },
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			create_component(icon.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(" Log in to save");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			claim_component(icon.$$.fragment, button_nodes);
			t0 = claim_space(button_nodes);
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, " Log in to save");
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1xhvee5");
			add_location(span, file$1, 210, 4, 5014);
			attr_dev(button, "class", "icon svelte-1xhvee5");
			add_location(button, file$1, 208, 3, 4929);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			mount_component(icon, button, null);
			append_dev(button, t0);
			append_dev(button, span);
			append_dev(span, t1);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", prevent_default(/*login*/ ctx[8]), false, true, false);
				mounted = true;
			}
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(208:2) {:else}",
		ctx
	});

	return block;
}

// (206:2) {#if $session.user}
function create_if_block$1(ctx) {
	let usermenu;
	let current;
	usermenu = new UserMenu({ $$inline: true });

	const block = {
		c: function create() {
			create_component(usermenu.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(usermenu.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(usermenu, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(usermenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(usermenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(usermenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(206:2) {#if $session.user}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let input;
	let enter_action;
	let t0;
	let div0;
	let button0;
	let current_block_type_index;
	let if_block0;
	let t1;
	let button1;
	let icon;
	let t2;
	let button2;
	let current_block_type_index_1;
	let if_block1;
	let button2_disabled_value;
	let t3;
	let button3;
	let current_block_type_index_2;
	let if_block2;
	let button3_disabled_value;
	let t4;
	let current_block_type_index_3;
	let if_block3;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_3, create_else_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*zen_mode*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	icon = new Icon({
			props: { name: "download" },
			$$inline: true
		});

	const if_block_creators_1 = [create_if_block_2, create_else_block_2];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*justForked*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	const if_block_creators_2 = [create_if_block_1, create_else_block_1];
	const if_blocks_2 = [];

	function select_block_type_2(ctx, dirty) {
		if (/*justSaved*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index_2 = select_block_type_2(ctx);
	if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
	const if_block_creators_3 = [create_if_block$1, create_else_block];
	const if_blocks_3 = [];

	function select_block_type_3(ctx, dirty) {
		if (/*$session*/ ctx[2].user) return 0;
		return 1;
	}

	current_block_type_index_3 = select_block_type_3(ctx);
	if_block3 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			input = element("input");
			t0 = space();
			div0 = element("div");
			button0 = element("button");
			if_block0.c();
			t1 = space();
			button1 = element("button");
			create_component(icon.$$.fragment);
			t2 = space();
			button2 = element("button");
			if_block1.c();
			t3 = space();
			button3 = element("button");
			if_block2.c();
			t4 = space();
			if_block3.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			input = claim_element(div1_nodes, "INPUT", { class: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { style: true });
			var div0_nodes = children(div0);
			button0 = claim_element(div0_nodes, "BUTTON", { class: true, title: true });
			var button0_nodes = children(button0);
			if_block0.l(button0_nodes);
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			button1 = claim_element(div0_nodes, "BUTTON", { class: true, disabled: true, title: true });
			var button1_nodes = children(button1);
			claim_component(icon.$$.fragment, button1_nodes);
			button1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			button2 = claim_element(div0_nodes, "BUTTON", { class: true, disabled: true, title: true });
			var button2_nodes = children(button2);
			if_block1.l(button2_nodes);
			button2_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			button3 = claim_element(div0_nodes, "BUTTON", { class: true, disabled: true, title: true });
			var button3_nodes = children(button3);
			if_block2.l(button3_nodes);
			button3_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			if_block3.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "class", "svelte-1xhvee5");
			add_location(input, file$1, 170, 1, 3982);
			attr_dev(button0, "class", "icon svelte-1xhvee5");
			attr_dev(button0, "title", "fullscreen editor");
			add_location(button0, file$1, 177, 2, 4143);
			attr_dev(button1, "class", "icon svelte-1xhvee5");
			button1.disabled = /*downloading*/ ctx[4];
			attr_dev(button1, "title", "download zip file");
			add_location(button1, file$1, 185, 2, 4339);
			attr_dev(button2, "class", "icon svelte-1xhvee5");
			button2.disabled = button2_disabled_value = /*saving*/ ctx[3] || !/*$session*/ ctx[2].user;
			attr_dev(button2, "title", "fork");
			add_location(button2, file$1, 189, 2, 4473);
			attr_dev(button3, "class", "icon svelte-1xhvee5");
			button3.disabled = button3_disabled_value = /*saving*/ ctx[3] || !/*$session*/ ctx[2].user;
			attr_dev(button3, "title", "save");
			add_location(button3, file$1, 197, 2, 4687);
			set_style(div0, "text-align", "right");
			set_style(div0, "margin-right", ".4rem");
			add_location(div0, file$1, 176, 1, 4089);
			attr_dev(div1, "class", "app-controls svelte-1xhvee5");
			add_location(div1, file$1, 169, 0, 3954);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, input);
			set_input_value(input, /*name*/ ctx[0]);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, button0);
			if_blocks[current_block_type_index].m(button0, null);
			append_dev(div0, t1);
			append_dev(div0, button1);
			mount_component(icon, button1, null);
			append_dev(div0, t2);
			append_dev(div0, button2);
			if_blocks_1[current_block_type_index_1].m(button2, null);
			append_dev(div0, t3);
			append_dev(div0, button3);
			if_blocks_2[current_block_type_index_2].m(button3, null);
			append_dev(div0, t4);
			if_blocks_3[current_block_type_index_3].m(div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "keydown", /*handleKeydown*/ ctx[9], false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[16]),
					listen_dev(input, "focus", focus_handler, false, false, false),
					action_destroyer(enter_action = enter.call(null, input, enter_function)),
					listen_dev(button0, "click", /*click_handler*/ ctx[17], false, false, false),
					listen_dev(button1, "click", /*download*/ ctx[12], false, false, false),
					listen_dev(button2, "click", /*click_handler_1*/ ctx[18], false, false, false),
					listen_dev(button3, "click", /*save*/ ctx[11], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
				set_input_value(input, /*name*/ ctx[0]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(button0, null);
			}

			if (!current || dirty & /*downloading*/ 16) {
				prop_dev(button1, "disabled", /*downloading*/ ctx[4]);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 !== previous_block_index_1) {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(button2, null);
			}

			if (!current || dirty & /*saving, $session*/ 12 && button2_disabled_value !== (button2_disabled_value = /*saving*/ ctx[3] || !/*$session*/ ctx[2].user)) {
				prop_dev(button2, "disabled", button2_disabled_value);
			}

			let previous_block_index_2 = current_block_type_index_2;
			current_block_type_index_2 = select_block_type_2(ctx);

			if (current_block_type_index_2 !== previous_block_index_2) {
				group_outros();

				transition_out(if_blocks_2[previous_block_index_2], 1, 1, () => {
					if_blocks_2[previous_block_index_2] = null;
				});

				check_outros();
				if_block2 = if_blocks_2[current_block_type_index_2];

				if (!if_block2) {
					if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(button3, null);
			}

			if (!current || dirty & /*saving, $session*/ 12 && button3_disabled_value !== (button3_disabled_value = /*saving*/ ctx[3] || !/*$session*/ ctx[2].user)) {
				prop_dev(button3, "disabled", button3_disabled_value);
			}

			let previous_block_index_3 = current_block_type_index_3;
			current_block_type_index_3 = select_block_type_3(ctx);

			if (current_block_type_index_3 === previous_block_index_3) {
				if_blocks_3[current_block_type_index_3].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_3[previous_block_index_3], 1, 1, () => {
					if_blocks_3[previous_block_index_3] = null;
				});

				check_outros();
				if_block3 = if_blocks_3[current_block_type_index_3];

				if (!if_block3) {
					if_block3 = if_blocks_3[current_block_type_index_3] = if_block_creators_3[current_block_type_index_3](ctx);
					if_block3.c();
				} else {
					if_block3.p(ctx, dirty);
				}

				transition_in(if_block3, 1);
				if_block3.m(div0, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(icon.$$.fragment, local);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(icon.$$.fragment, local);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if_blocks[current_block_type_index].d();
			destroy_component(icon);
			if_blocks_1[current_block_type_index_1].d();
			if_blocks_2[current_block_type_index_2].d();
			if_blocks_3[current_block_type_index_3].d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function wait(ms) {
	return new Promise(f => setTimeout(f, ms));
}

const focus_handler = e => e.target.select();
const enter_function = e => e.target.blur();

function instance$1($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("AppControls", slots, []);
	const dispatch = createEventDispatcher();
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(2, $session = value));
	const { login } = getContext("app");
	let { repl } = $$props;
	let { gist } = $$props;
	let { name } = $$props;
	let { zen_mode } = $$props;
	let { bundle } = $$props;
	let saving = false;
	let downloading = false;
	let justSaved = false;
	let justForked = false;

	function handleKeydown(event) {
		if (event.key === "s" && (isMac ? event.metaKey : event.ctrlKey)) {
			event.preventDefault();
			save();
		}
	}

	async function fork(intentWasSave) {
		$$invalidate(3, saving = true);
		const { components } = repl.toJSON();

		try {
			const r = await fetch(`repl/create.json`, {
				method: "POST",
				credentials: "include",
				body: JSON.stringify({
					name,
					files: components.map(component => ({
						name: `${component.name}.${component.type}`,
						source: component.source
					}))
				})
			});

			if (r.status < 200 || r.status >= 300) {
				const { error } = await r.json();
				throw new Error(`Received an HTTP ${r.status} response: ${error}`);
			}

			const gist = await r.json();
			dispatch("forked", { gist });

			if (intentWasSave) {
				$$invalidate(5, justSaved = true);
				await wait(600);
				$$invalidate(5, justSaved = false);
			} else {
				$$invalidate(6, justForked = true);
				await wait(600);
				$$invalidate(6, justForked = false);
			}
		} catch(err) {
			if (navigator.onLine) {
				alert(err.message);
			} else {
				alert(`It looks like you're offline! Find the internet and try again`);
			}
		}

		$$invalidate(3, saving = false);
	}

	async function save() {
		if (saving) return;

		if (!canSave) {
			fork(true);
			return;
		}

		$$invalidate(3, saving = true);

		try {
			// Send all files back to API
			// ~> Any missing files are considered deleted!
			const { components } = repl.toJSON();

			const r = await fetch(`repl/${gist.uid}.json`, {
				method: "PATCH",
				credentials: "include",
				body: JSON.stringify({
					name,
					files: components.map(component => ({
						name: `${component.name}.${component.type}`,
						source: component.source
					}))
				})
			});

			if (r.status < 200 || r.status >= 300) {
				const { error } = await r.json();
				throw new Error(`Received an HTTP ${r.status} response: ${error}`);
			}

			await r.json();
			$$invalidate(5, justSaved = true);
			await wait(600);
			$$invalidate(5, justSaved = false);
		} catch(err) {
			if (navigator.onLine) {
				alert(err.message);
			} else {
				alert(`It looks like you're offline! Find the internet and try again`);
			}
		}

		$$invalidate(3, saving = false);
	}

	async function download() {
		$$invalidate(4, downloading = true);
		const { components, imports } = repl.toJSON();
		const files = await (await fetch("/svelte-app.json")).json();

		if (imports.length > 0) {
			const idx = files.findIndex(({ path }) => path === "package.json");
			const pkg = JSON.parse(files[idx].data);
			const { devDependencies } = pkg;

			imports.forEach(mod => {
				const match = (/^(@[^/]+\/)?[^@/]+/).exec(mod);
				devDependencies[match[0]] = "latest";
			});

			pkg.devDependencies = devDependencies;
			files[idx].data = JSON.stringify(pkg, null, "  ");
		}

		files.push(...components.map(component => ({
			path: `src/${component.name}.${component.type}`,
			data: component.source
		})));

		files.push({
			path: `src/main.js`,
			data: `import App from './App.svelte';

var app = new App({
	target: document.body
});

export default app;`
		});

		downloadBlob(toBlob(files), "svelte-app.zip");
		$$invalidate(4, downloading = false);
	}

	const writable_props = ["repl", "gist", "name", "zen_mode", "bundle"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AppControls> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		name = this.value;
		$$invalidate(0, name);
	}

	const click_handler = () => $$invalidate(1, zen_mode = !zen_mode);
	const click_handler_1 = () => fork(false);

	$$self.$$set = $$props => {
		if ("repl" in $$props) $$invalidate(13, repl = $$props.repl);
		if ("gist" in $$props) $$invalidate(14, gist = $$props.gist);
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("zen_mode" in $$props) $$invalidate(1, zen_mode = $$props.zen_mode);
		if ("bundle" in $$props) $$invalidate(15, bundle = $$props.bundle);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		getContext,
		stores: stores$1,
		UserMenu,
		Icon,
		doNotZip,
		downloadBlob,
		enter,
		isMac,
		dispatch,
		session,
		login,
		repl,
		gist,
		name,
		zen_mode,
		bundle,
		saving,
		downloading,
		justSaved,
		justForked,
		wait,
		handleKeydown,
		fork,
		save,
		download,
		canSave,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("repl" in $$props) $$invalidate(13, repl = $$props.repl);
		if ("gist" in $$props) $$invalidate(14, gist = $$props.gist);
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("zen_mode" in $$props) $$invalidate(1, zen_mode = $$props.zen_mode);
		if ("bundle" in $$props) $$invalidate(15, bundle = $$props.bundle);
		if ("saving" in $$props) $$invalidate(3, saving = $$props.saving);
		if ("downloading" in $$props) $$invalidate(4, downloading = $$props.downloading);
		if ("justSaved" in $$props) $$invalidate(5, justSaved = $$props.justSaved);
		if ("justForked" in $$props) $$invalidate(6, justForked = $$props.justForked);
		if ("canSave" in $$props) canSave = $$props.canSave;
	};

	let canSave;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$session, gist*/ 16388) {
			 canSave = $session.user && gist && gist.owner === $session.user.uid;
		}
	};

	return [
		name,
		zen_mode,
		$session,
		saving,
		downloading,
		justSaved,
		justForked,
		session,
		login,
		handleKeydown,
		fork,
		save,
		download,
		repl,
		gist,
		bundle,
		input_input_handler,
		click_handler,
		click_handler_1
	];
}

class AppControls extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			repl: 13,
			gist: 14,
			name: 0,
			zen_mode: 1,
			bundle: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AppControls",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*repl*/ ctx[13] === undefined && !("repl" in props)) {
			console.warn("<AppControls> was created without expected prop 'repl'");
		}

		if (/*gist*/ ctx[14] === undefined && !("gist" in props)) {
			console.warn("<AppControls> was created without expected prop 'gist'");
		}

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<AppControls> was created without expected prop 'name'");
		}

		if (/*zen_mode*/ ctx[1] === undefined && !("zen_mode" in props)) {
			console.warn("<AppControls> was created without expected prop 'zen_mode'");
		}

		if (/*bundle*/ ctx[15] === undefined && !("bundle" in props)) {
			console.warn("<AppControls> was created without expected prop 'bundle'");
		}
	}

	get repl() {
		throw new Error_1("<AppControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set repl(value) {
		throw new Error_1("<AppControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get gist() {
		throw new Error_1("<AppControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set gist(value) {
		throw new Error_1("<AppControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error_1("<AppControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error_1("<AppControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get zen_mode() {
		throw new Error_1("<AppControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set zen_mode(value) {
		throw new Error_1("<AppControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bundle() {
		throw new Error_1("<AppControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bundle(value) {
		throw new Error_1("<AppControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/repl/[id]/index.svelte generated by Svelte v3.31.0 */

const { console: console_1, window: window_1 } = globals;
const file$2 = "src/routes/repl/[id]/index.svelte";

// (212:1) {#if true}
function create_if_block$2(ctx) {
	let div;
	let repl_1;
	let t;
	let if_block_anchor;
	let current;

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl: /*svelteUrl*/ ctx[6],
		rollupUrl: /*rollupUrl*/ ctx[11],
		relaxed: /*relaxed*/ ctx[8],
		fixed: /*mobile*/ ctx[7],
		injectedJS: /*mapbox_setup*/ ctx[12]
	};

	repl_1 = new Repl({ props: repl_1_props, $$inline: true });
	/*repl_1_binding*/ ctx[20](repl_1);
	let if_block = /*mobile*/ ctx[7] && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(repl_1.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(repl_1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "viewport svelte-13ln553");
			toggle_class(div, "offset", /*checked*/ ctx[5]);
			add_location(div, file$2, 212, 2, 4696);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(repl_1, div, null);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const repl_1_changes = {};
			if (dirty & /*svelteUrl*/ 64) repl_1_changes.svelteUrl = /*svelteUrl*/ ctx[6];
			if (dirty & /*relaxed*/ 256) repl_1_changes.relaxed = /*relaxed*/ ctx[8];
			if (dirty & /*mobile*/ 128) repl_1_changes.fixed = /*mobile*/ ctx[7];
			repl_1.$set(repl_1_changes);

			if (dirty & /*checked*/ 32) {
				toggle_class(div, "offset", /*checked*/ ctx[5]);
			}

			if (/*mobile*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*mobile*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(repl_1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*repl_1_binding*/ ctx[20](null);
			destroy_component(repl_1);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(212:1) {#if true}",
		ctx
	});

	return block;
}

// (225:2) {#if mobile}
function create_if_block_1$1(ctx) {
	let inputoutputtoggle;
	let updating_checked;
	let current;

	function inputoutputtoggle_checked_binding(value) {
		/*inputoutputtoggle_checked_binding*/ ctx[21].call(null, value);
	}

	let inputoutputtoggle_props = {};

	if (/*checked*/ ctx[5] !== void 0) {
		inputoutputtoggle_props.checked = /*checked*/ ctx[5];
	}

	inputoutputtoggle = new InputOutputToggle({
			props: inputoutputtoggle_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(inputoutputtoggle, "checked", inputoutputtoggle_checked_binding));

	const block = {
		c: function create() {
			create_component(inputoutputtoggle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(inputoutputtoggle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(inputoutputtoggle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const inputoutputtoggle_changes = {};

			if (!updating_checked && dirty & /*checked*/ 32) {
				updating_checked = true;
				inputoutputtoggle_changes.checked = /*checked*/ ctx[5];
				add_flush_callback(() => updating_checked = false);
			}

			inputoutputtoggle.$set(inputoutputtoggle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(inputoutputtoggle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(inputoutputtoggle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(inputoutputtoggle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(225:2) {#if mobile}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let title_value;
	let meta0;
	let meta1;
	let meta2;
	let t0;
	let div;
	let appcontrols;
	let updating_name;
	let updating_zen_mode;
	let t1;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[17]);
	document.title = title_value = "" + (/*name*/ ctx[3] + " • REPL • Svelte");

	function appcontrols_name_binding(value) {
		/*appcontrols_name_binding*/ ctx[18].call(null, value);
	}

	function appcontrols_zen_mode_binding(value) {
		/*appcontrols_zen_mode_binding*/ ctx[19].call(null, value);
	}

	let appcontrols_props = {
		gist: /*gist*/ ctx[0],
		repl: /*repl*/ ctx[2]
	};

	if (/*name*/ ctx[3] !== void 0) {
		appcontrols_props.name = /*name*/ ctx[3];
	}

	if (/*zen_mode*/ ctx[4] !== void 0) {
		appcontrols_props.zen_mode = /*zen_mode*/ ctx[4];
	}

	appcontrols = new AppControls({ props: appcontrols_props, $$inline: true });
	binding_callbacks.push(() => bind(appcontrols, "name", appcontrols_name_binding));
	binding_callbacks.push(() => bind(appcontrols, "zen_mode", appcontrols_zen_mode_binding));
	appcontrols.$on("forked", /*handle_fork*/ ctx[10]);
	let if_block =  create_if_block$2(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div = element("div");
			create_component(appcontrols.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-d7d7y5\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(appcontrols.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte REPL");
			add_location(meta0, file$2, 195, 1, 4271);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", "Cybernetically enhanced web apps");
			add_location(meta1, file$2, 196, 1, 4322);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", "Interactive Svelte playground");
			add_location(meta2, file$2, 197, 1, 4400);
			attr_dev(div, "class", div_class_value = "repl-outer " + (/*zen_mode*/ ctx[4] ? "zen-mode" : "") + " svelte-13ln553");
			toggle_class(div, "mobile", /*mobile*/ ctx[7]);
			add_location(div, file$2, 202, 0, 4524);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(appcontrols, div, null);
			append_dev(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window_1, "resize", /*onwindowresize*/ ctx[17]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*name*/ 8) && title_value !== (title_value = "" + (/*name*/ ctx[3] + " • REPL • Svelte"))) {
				document.title = title_value;
			}

			const appcontrols_changes = {};
			if (dirty & /*gist*/ 1) appcontrols_changes.gist = /*gist*/ ctx[0];
			if (dirty & /*repl*/ 4) appcontrols_changes.repl = /*repl*/ ctx[2];

			if (!updating_name && dirty & /*name*/ 8) {
				updating_name = true;
				appcontrols_changes.name = /*name*/ ctx[3];
				add_flush_callback(() => updating_name = false);
			}

			if (!updating_zen_mode && dirty & /*zen_mode*/ 16) {
				updating_zen_mode = true;
				appcontrols_changes.zen_mode = /*zen_mode*/ ctx[4];
				add_flush_callback(() => updating_zen_mode = false);
			}

			appcontrols.$set(appcontrols_changes);
			if_block.p(ctx, dirty);

			if (!current || dirty & /*zen_mode*/ 16 && div_class_value !== (div_class_value = "repl-outer " + (/*zen_mode*/ ctx[4] ? "zen-mode" : "") + " svelte-13ln553")) {
				attr_dev(div, "class", div_class_value);
			}

			if (dirty & /*zen_mode, mobile*/ 144) {
				toggle_class(div, "mobile", /*mobile*/ ctx[7]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(appcontrols.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(appcontrols.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(appcontrols);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return {
		version: query.version || "3",
		id: params.id
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bidu5D", slots, []);
	let { version } = $$props;
	let { id } = $$props;
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(16, $session = value));
	let repl;
	let gist;
	let name = "Loading...";
	let zen_mode = false;
	let is_relaxed_gist = false;
	let width =  window.innerWidth ;
	let checked = false;

	function update_query_string(version) {
		const params = [];
		if (version !== "latest") params.push(`version=${version}`);

		const url = params.length > 0
		? `repl/${id}?${params.join("&")}`
		: `repl/${id}`;

		history.replaceState({}, "x", url);
	}

	function fetch_gist(id) {
		if (gist && gist.uid === id) {
			// if the id changed because we just forked, don't refetch
			return;
		}

		// TODO handle `relaxed` logic
		fetch(`repl/${id}.json`).then(r => {
			if (r.ok) {
				r.json().then(data => {
					$$invalidate(0, gist = data);
					$$invalidate(3, name = data.name);
					$$invalidate(15, is_relaxed_gist = data.relaxed);

					const components = data.files.map(file => {
						const dot = file.name.lastIndexOf(".");
						let name = file.name.slice(0, dot);
						let type = file.name.slice(dot + 1);
						if (type === "html") type = "svelte"; // TODO do this on the server
						return { name, type, source: file.source };
					});

					components.sort((a, b) => {
						if (a.name === "App" && a.type === "svelte") return -1;
						if (b.name === "App" && b.type === "svelte") return 1;
						if (a.type !== b.type) return a.type === "svelte" ? -1 : 1;
						return a.name < b.name ? -1 : 1;
					});

					repl.set({ components });
				});
			} else {
				console.warn("TODO: 404 Gist");
			}
		});
	}

	onMount(() => {
		if (version !== "local") {
			fetch(`https://unpkg.com/svelte@${version || "3"}/package.json`).then(r => r.json()).then(pkg => {
				$$invalidate(13, version = pkg.version);
			});
		}
	});

	function handle_fork(event) {
		console.log("> handle_fork", event);
		$$invalidate(0, gist = event.detail.gist);
		goto(`/repl/${gist.uid}?version=${version}`);
	}

	const rollupUrl = `https://unpkg.com/rollup@1/dist/rollup.browser.js`;

	// needed for context API example
	const mapbox_setup = `window.MAPBOX_ACCESS_TOKEN = undefined;`;

	const writable_props = ["version", "id"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		$$invalidate(1, width = window_1.innerWidth);
	}

	function appcontrols_name_binding(value) {
		name = value;
		$$invalidate(3, name);
	}

	function appcontrols_zen_mode_binding(value) {
		zen_mode = value;
		$$invalidate(4, zen_mode);
	}

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			repl = $$value;
			$$invalidate(2, repl);
		});
	}

	function inputoutputtoggle_checked_binding(value) {
		checked = value;
		$$invalidate(5, checked);
	}

	$$self.$$set = $$props => {
		if ("version" in $$props) $$invalidate(13, version = $$props.version);
		if ("id" in $$props) $$invalidate(14, id = $$props.id);
	};

	$$self.$capture_state = () => ({
		preload,
		Repl,
		onMount,
		goto,
		stores: stores$1,
		InputOutputToggle,
		AppControls,
		version,
		id,
		session,
		repl,
		gist,
		name,
		zen_mode,
		is_relaxed_gist,
		width,
		checked,
		update_query_string,
		fetch_gist,
		handle_fork,
		rollupUrl,
		mapbox_setup,
		svelteUrl,
		mobile,
		relaxed,
		$session
	});

	$$self.$inject_state = $$props => {
		if ("version" in $$props) $$invalidate(13, version = $$props.version);
		if ("id" in $$props) $$invalidate(14, id = $$props.id);
		if ("repl" in $$props) $$invalidate(2, repl = $$props.repl);
		if ("gist" in $$props) $$invalidate(0, gist = $$props.gist);
		if ("name" in $$props) $$invalidate(3, name = $$props.name);
		if ("zen_mode" in $$props) $$invalidate(4, zen_mode = $$props.zen_mode);
		if ("is_relaxed_gist" in $$props) $$invalidate(15, is_relaxed_gist = $$props.is_relaxed_gist);
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("checked" in $$props) $$invalidate(5, checked = $$props.checked);
		if ("svelteUrl" in $$props) $$invalidate(6, svelteUrl = $$props.svelteUrl);
		if ("mobile" in $$props) $$invalidate(7, mobile = $$props.mobile);
		if ("relaxed" in $$props) $$invalidate(8, relaxed = $$props.relaxed);
	};

	let svelteUrl;
	let mobile;
	let relaxed;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*version*/ 8192) {
			 if (typeof history !== "undefined") update_query_string(version);
		}

		if ($$self.$$.dirty & /*id*/ 16384) {
			 fetch_gist(id);
		}

		if ($$self.$$.dirty & /*version*/ 8192) {
			 $$invalidate(6, svelteUrl =  version === "local"
			? `${location.origin}/repl/local`
			: `https://unpkg.com/svelte@${version}`);
		}

		if ($$self.$$.dirty & /*width*/ 2) {
			 $$invalidate(7, mobile = width < 540);
		}

		if ($$self.$$.dirty & /*is_relaxed_gist, $session, gist*/ 98305) {
			 $$invalidate(8, relaxed = is_relaxed_gist || $session.user && gist && $session.user.uid === gist.owner);
		}
	};

	return [
		gist,
		width,
		repl,
		name,
		zen_mode,
		checked,
		svelteUrl,
		mobile,
		relaxed,
		session,
		handle_fork,
		rollupUrl,
		mapbox_setup,
		version,
		id,
		is_relaxed_gist,
		$session,
		onwindowresize,
		appcontrols_name_binding,
		appcontrols_zen_mode_binding,
		repl_1_binding,
		inputoutputtoggle_checked_binding
	];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { version: 13, id: 14 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*version*/ ctx[13] === undefined && !("version" in props)) {
			console_1.warn("<U5Bidu5D> was created without expected prop 'version'");
		}

		if (/*id*/ ctx[14] === undefined && !("id" in props)) {
			console_1.warn("<U5Bidu5D> was created without expected prop 'id'");
		}
	}

	get version() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set version(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bidu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
